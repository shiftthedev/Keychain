buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'me.modmuss50.mod-publish-plugin' version "0.5.2"
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://cursemaven.com" }
    repositories {
        maven {
            name = "Illusive Soulworks maven"
            url = "https://maven.theillusivec4.top/"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.0:api"))
    implementation(fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.0"))

    // Curseforge mod dependencies
    implementation fg.deobf("curse.maven:vault-hunters-official-mod-458203:${vault_hunters_version}")
    
    // Dependencies for Runtime Debug
    implementation fg.deobf("curse.maven:quark-243121:${quark_version}")
    implementation fg.deobf("curse.maven:applied-energistics-2-223794:${applied_energistics_version}")
    implementation fg.deobf("curse.maven:refined-storage-243076:${refined_storage_version}")
    implementation fg.deobf("curse.maven:mekanism-268560:${mekanism_version}")
    implementation fg.deobf("curse.maven:simple-storage-network-268495:${simple_storage_version}")
    implementation fg.deobf("curse.maven:architects-palette-433862:${architects_palette_version}")
    //implementation fg.deobf("curse.maven:curios-309927:${curious_version}")
    implementation fg.deobf("curse.maven:autoreglib-250363:${autoreglib_version}")
    implementation fg.deobf("curse.maven:sophisticated-core-618298:${sophisticated_core_version}")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-422301:${sophisticated_backpacks_version}")
    implementation fg.deobf("curse.maven:sophisticated-backpacks-vault-hunters-edition-696425:${sophisticated_backpacks_vh_version}")
    implementation fg.deobf("curse.maven:configured-457570:${configured_version}")
    implementation fg.deobf("curse.maven:storage-drawers-223852:${storage_drawers_version}")
    implementation fg.deobf("curse.maven:geckolib-388172:${geckolib_version}")
    implementation fg.deobf("curse.maven:citadel-331936:${citadel_version}")
    implementation fg.deobf("curse.maven:jei-238222:${jei_version}")
    
    // Compat
    implementation fg.deobf("curse.maven:inventory-hud-forge-357540:${invhud_version}")
    implementation fg.deobf("curse.maven:create-328085:${create_version}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

//publishMods {
//    def tokens = file('./oaths.txt').readLines()
//
//    dryRun = tokens[0] == null
//    changelog = file("./CHANGELOG.md").text
//    version = "${mod_version}"
//    type = STABLE
//
//    def forgeOptions = publishOptions {
//        file = jar.archiveFile
//        modLoaders.add("forge")
//    }
//
//    def curseforgeOptions = curseforgeOptions {
//        accessToken = tokens[0]
//        projectId = "${curse_id}"
//        minecraftVersions.add("${minecraft_version}")
//        javaVersions.add(JavaVersion.VERSION_17)
//        clientRequired = true
//        serverRequired = true
//    }
//
//    curseforge("curseforgeForge") {
//        from(curseforgeOptions, forgeOptions)
//        requires ( "vault-hunters-official-mod" )
//    }
//}
